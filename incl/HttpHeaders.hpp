#include <vector>
#include <string>

#define UNRECOGNIZED_HEADER -1

#define HTTP_GENERAL_HEADERS_N 9
#define HTTP_REQUEST_HEADERS_N 19
#define HTTP_RESPONSE_HEADERS_N 9
#define HTTP_ENTITY_HEADERS_N 10
#define HTTP_REQUEST_LEGAL_HEADERS_N 38

enum e_http_header {
	HEADER_ACCEPT = 0,
	HEADER_ACCEPT_CHARSET,
	HEADER_ACCEPT_ENCODING,
	HEADER_ACCEPT_LANGUAGE,
	HEADER_ACCEPT_RANGES,
	HEADER_AGE,
	HEADER_ALLOW,
	HEADER_AUTHORIZATION,
	HEADER_CACHE_CONTROL,
	HEADER_CONNECTION,
	HEADER_CONTENT_ENCODING,
	HEADER_CONTENT_LANGUAGE,
	HEADER_CONTENT_LENGTH,
	HEADER_CONTENT_LOCATION,
	HEADER_CONTENT_MD5,
	HEADER_CONTENT_RANGE,
	HEADER_CONTENT_TYPE,
	HEADER_DATE,
	HEADER_ETAG,
	HEADER_EXPECT,
	HEADER_EXPIRES,
	HEADER_FROM,
	HEADER_HOST,
	HEADER_IF_MATCH,
	HEADER_IF_MODIFIED_SINCE,
	HEADER_IF_NONE_MATCH,
	HEADER_IF_RANGE,
	HEADER_IF_UNMODIFIED_SINCE,
	HEADER_LAST_MODIFIED,
	HEADER_LOCATION,
	HEADER_MAX_FORWARDS,
	HEADER_PRAGMA,
	HEADER_PROXY_AUTHENTICATE,
	HEADER_PROXY_AUTHORIZATION,
	HEADER_RANGE,
	HEADER_REFERER,
	HEADER_RETRY_AFTER,
	HEADER_SERVER,
	HEADER_TE,
	HEADER_TRAILER,
	HEADER_TRANSFER_ENCODING,
	HEADER_UPGRADE,
	HEADER_USER_AGENT,
	HEADER_VARY,
	HEADER_VIA,
	HEADER_WARNING,
	HEADER_WWW_AUTHENTICATE,
	HTTP_HEADERS_N
};

extern const char *http_header_names[HTTP_HEADERS_N];
extern const char *http_general_headers[HTTP_GENERAL_HEADERS_N];
extern const char *http_request_headers[HTTP_REQUEST_HEADERS_N];
extern const char *http_response_headers[HTTP_RESPONSE_HEADERS_N];
extern const char *http_entity_headers[HTTP_ENTITY_HEADERS_N];

extern const char *http_request_legal_headers[HTTP_REQUEST_LEGAL_HEADERS_N];

// extern const std::vector<std::string> 